Project requirements are as follows:
This activity will involve implementing a game that is very similar to the "Dessert in the Desert Game" from your JavaScript Activity but doing so directly within JavaFX. Your solution to this assignment should be written entirely in Java using JavaFX, and CANNOT lad or make use of any HTML or JavaScript.
1. Change the window title for this application to "Dessert in the Desert JavaFX Game". Update the dimensions of your scene to be 640 pixels wide by 480 pixels tall.
2. Remove the Label and Shape objects left over from the previous activity. Then replace the Group object at the root of your scene graph with a new BorderPane object (you can remove the Group object entirely).
3. Place a new Label with the text "Score: 0" at the top of your BorderPane, and leave the default alignment of TOP_LEFT for this label. Create a button with the label "Exit" that will end your application when it is clicked. Place this button within the bottom of your BorderPane, and set its alignment to BOTTOM_RIGHT.
4. Create a new Pane object. Place this new pane within the center of your BorderPane, and leave the default alignment of CENTER for this pane. Create all eight buttons with the labels previously described, and add each of them to your pane.
5. Create a single button with the label "Dessert" as well as seven more buttons with the label "Desert" on the Pane defined in Step 4. By default, they will be displayed at the same positions, but we'll address this in the next step.
6. Define a private helper method named randomizeButtonPositions that takes two input parameters in this order: a java.util.Random random number generator, and an array of Button objects. This method should use the setLayoutX and setLayoutY methods to randomize the position of each button to be between 0-600 pixels for the X position, and between 0-400 pixels for the Y position. This method should be called when the program starts running, and then again after any Dessert or Desert button is pressed.
7. Add a private int field named score to your class, and initialize it to zero. Every time the "Dessert" button is clicked, increment this score by one before updating the text within the score label to display this new score. Every time the "Desert" button is clicked, decrement this score by one before updating the text within the score label to display this new score.
8. You may notice that by default, any button clicked will retain focus and be displayed a bit differently from the other buttons. Since this makes our game a bit too easy, we'll call the requestFocus method on the "Exit" button both 1) when our game starts up, and 2) every time any "Dessert" or "Desert" button is clicked. This should keep the Exit button in focus, and make our other buttons look more similar to one another.
